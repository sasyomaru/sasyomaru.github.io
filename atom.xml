<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>顿悟</title>
  <subtitle>捕捉技术与生活中的灵感</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sparkshining.com/"/>
  <updated>2015-12-16T10:30:50.000Z</updated>
  <id>http://sparkshining.com/</id>
  
  <author>
    <name>流星泉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>经济危机中的倒牛奶行为</title>
    <link href="http://sparkshining.com/2015/12/16/pour-milk/"/>
    <id>http://sparkshining.com/2015/12/16/pour-milk/</id>
    <published>2015-12-16T12:27:20.000Z</published>
    <updated>2015-12-16T10:30:50.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在看经济学的书，确实脑洞大开。很多以前解释不清的问题，终于有了连贯的逻辑链条。&lt;/p&gt;
&lt;p&gt;当年学马克思主义政治经济学的时候，那个经济危机中美国奶牛农场主把牛奶倒入海中的故事甚是触目惊心。然而，笔者完全无法认同“这反映了资本家剥削穷人的本质”这种观点。商人最懂得做顺水人情从而获取长远利益。因此，一定存在着一种理性且合乎逻辑的机制，来促成农场主做了如此的决策。&lt;/p&gt;
&lt;p&gt;笔者看过的一篇材料显示，在1931年-1934年在美国中西部发生了奶农罢工事件，在这次事件中，部分有组织的罢工奶农强行倾倒其他奶农的牛奶。然而，一者笔者无法验证这则材料的真伪，二者倒牛奶事件不止发生在上述时间和上述地区，因此这个事件不在笔者讨论之列。&lt;/p&gt;
&lt;p&gt;先让我们看看一个很官方的解释：倒牛奶会改变供求关系从而影响价格。这个答案相当具有迷惑性，因为推翻这句话就意味着推翻经济学大厦基础的需求曲线。但是请注意，这里有个重大的思维陷阱：这个答案陈述本身没有任何问题，而漏洞在于，这个答案跟问题之间并没有必然联系。
    &lt;br&gt;首先，价格从来都不是资本家考虑的因素，利润才是。所以从来就没有“影响价格”这种需求，人们的需求是不要影响利润。
    &lt;br&gt;当我们关注利润的时候，就出现了一个无法解释的问题，那就是如果倒牛奶的人不属于某个拥有强大统筹能力的组织，就会面临一个风险：要是其他人不倒，我不就白倒了？然而迄今为止，如果我们不考虑有组织的罢工奶农这件事，笔者没有看到任何资料表明这些倒牛奶的人是有组织的。
    &lt;br&gt;当然这些都是小问题，这个观点最直接的漏洞在于，倒牛奶是否是为了改变供求关系。我们必须承认，倒牛奶确实会改变供求关系，但不见得这就是倒牛奶的原因。这就好比我吃火锅会花人民币，但是我吃火锅在绝大多数情况下不是因为我想花掉一笔钱，而是因为我想吃顿饭。衡量一件行为是否是一个原因造成的最简单的办法，就是看这个原因不再存在时，这个行为是否还会继续。根据原文，在奶农倒牛奶的同时，有些人是想喝牛奶喝不到的，也就是说倒牛奶行为并没有因为过剩需求的出现而停止。因此，改变供求关系是倒牛奶的”果”而不是“因”。如果倒牛奶是为了改变供求关系，那么这个时候明智的牛奶生产者应该做的是：找到这批喝不到牛奶的人并把牛奶以极低的价格卖给他们。&lt;/p&gt;
&lt;p&gt;如果当你仔细地开始考虑“找到这批喝不到牛奶的人并卖给他们”这个解决方案的时候，也许你已经想到我要说的了：倒牛奶是交易成本高于收益的结果。这里交易成本高体现为三个方面：
    &lt;br&gt;一是信息获取成本，生产牛奶的人没有办法获知谁想喝牛奶喝不到；这个问题在互联网时代似乎更容易解决一些，淘宝小店一开需求立即来，只要价格够低不怕没人买。
    &lt;br&gt;二是仓储成本，由于牛奶保质期短，不易储藏，所以生产牛奶的人一般不会大规模的建立仓储，而是依赖快速销售；临时建立仓储成本太高，生产牛奶的人无法支付。假如出现了一种技术，喊一嗓子把牛奶扔到田地里就能保存三十年，没准还会有人趁机抄底呢。
    &lt;br&gt;三是运输成本，哪怕生产牛奶的人愿意施舍给别人，运输的费用也是一笔不菲的支出。有两个假想的实验可以解释这一问题：假如倒牛奶的地方旁边就有人拿着容器等着喝牛奶，是否生产牛奶的人会阻止这一行为？假如倒牛奶的地方远离农场，是否生产牛奶的人会愿意将牛奶远距离运输到倾倒地点进行倾倒？显而易见，是运输成本阻碍了善良。&lt;/p&gt;
&lt;p&gt;综上，倒牛奶是由于供求关系突变，导致供方交易所得低于交易成本的结果。跟人性没有任何关系，绝对的“你跺你也麻”。至于这种突变是否是由于社会制度造成的，以及正确的调控手段是什么，就不在本文讨论之列了。&lt;/p&gt;</content>
    
    <summary type="html">
    
      当年学马克思主义政治经济学的时候，那个经济危机中美国奶牛农场主把牛奶倒入海中的故事甚是触目惊心。然而，笔者完全无法认同“这反映了资本家剥削穷人的本质”这种观点。商人最懂得做顺水人情从而获取长远利益。因此，一定存在着一种理性且合乎逻辑的机制，来促成农场主做了如此的决策。
    
    </summary>
    
      <category term="生活" scheme="http://sparkshining.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式中的arguments</title>
    <link href="http://sparkshining.com/2015/11/02/arguments-in-lambda/"/>
    <id>http://sparkshining.com/2015/11/02/arguments-in-lambda/</id>
    <published>2015-11-02T06:07:58.000Z</published>
    <updated>2015-11-02T06:22:41.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在一个项目中遇到了这个坑，记下来，以警来者。&lt;/p&gt;
&lt;p&gt;JavaScript在ES2015中初次引入了箭头函数（Arrow Function）这一俗称“lambda表达式”的概念，用来解决代码中this容易用错的问题（注意，this的定义从来就没有歧义，但确实是有点“反直觉”，容易被曾使用过其他语言的开发者误用）。想要了解这一特性，可以参阅
    &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/function&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇介绍ES6的文章&lt;/a&gt;中“箭头函数”一节（原文中已对本文所述的问题做了介绍）。&lt;/p&gt;
&lt;p&gt;在
    &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions-runtime-semantics-evaluation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES2015语言规范&lt;/a&gt;中，明确规定了箭头函数不定义arguments的本地绑定。换句话说，如果在箭头函数中使用了arguments，则其值为生成该函数的参数列表，比如下面代码：
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getFunction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; praise = getFunction(&lt;span class=&quot;string&quot;&gt;&#39;You suck!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;praise(&lt;span class=&quot;string&quot;&gt;&#39;You are great!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果在支持ES2015的浏览器（比如最新版的Chrome，笔者版本为46.0）上执行时你会发现，控制台会打印如下结果：
    &lt;br&gt;
    &lt;figure class=&quot;highlight plain&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;You suck!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;而不是直觉上的You are great!&lt;/p&gt;
&lt;p&gt;本来这个问题比较简单，规范上面这么定义的，这么做就是了。偏偏有人来搅局了：在ES2015尚未发布之前，
    &lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt;（一个微软推出的语言，为JavaScript的超集，由于与Angular 2和React的合作而逐渐被人所知）就定义了类似的功能并最初起名为Lambda(现已改为采用跟ES2015一致的术语“箭头函数”，但截至笔者写作本文时，有些文档尚未更新，比如
    &lt;a href=&quot;http://www.typescriptlang.org/Handbook#functions-lambdas-and-using-39this39&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;)。在TypeScript中，
    &lt;strong&gt;起初&lt;/strong&gt;并未对Lambda中的arguments做任何处理，因此，arguments所指向的就是最终函数的参数列表。也就是说如果你在TypeScript中编写了上文的程序，得到的打印结果就是You are great!。
    &lt;br&gt;幸运的是，TypeScript的开发者即时地意识到了这一点（见
    &lt;a href=&quot;https://github.com/Microsoft/TypeScript/issues/1609&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个TypeScript问题&lt;/a&gt;）。因此，如果在lambda中使用了arguments，你会得到如下的结果：&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;在TypeScript 1.5之前，该代码顺利通过编译，生成与E2015语义不一致的代码&lt;/li&gt;
    &lt;li&gt;在TypeScript 1.5之后，如果编译目标是ES6，该代码会顺利通过编译，生成箭头函数&lt;/li&gt;
    &lt;li&gt;在TypeScript 1.5之后，如果编译目标是ES3或者ES5，则该代码不会通过编译，错误如下：
        &lt;figure class=&quot;highlight plain&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                    &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error TS2496: The &amp;apos;arguments&amp;apos; object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/figure&gt;
    &lt;/li&gt;
&lt;/ol&gt;</content>
    
    <summary type="html">
    
      最近在一个项目中遇到了这个坑，记下来，以警来者。JavaScript在ES2015中初次引入了箭头函数（Arrow Function）这一俗称“lambda表达式”的概念，用来解决代码中this容易用错的问题。
    
    </summary>
    
      <category term="技术" scheme="http://sparkshining.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
      <category term="JS" scheme="http://sparkshining.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>我的中医观</title>
    <link href="http://sparkshining.com/2015/10/19/traditional-chinese-medical-science/"/>
    <id>http://sparkshining.com/2015/10/19/traditional-chinese-medical-science/</id>
    <published>2015-10-19T12:48:40.000Z</published>
    <updated>2015-11-02T06:12:48.000Z</updated>
    
    <content type="html">&lt;p&gt;最近也许是因为屠呦呦的诺贝尔获奖，千年大坑“中医是不是科学”又烽烟再起，争论愈演愈烈。思考良久，颇有心得，于是诉诸笔端。笔者知识有限，有些观点可能有误，欢迎斧正。&lt;/p&gt;
&lt;h3 id=&quot;中医是不是科学&quot;&gt;
    &lt;a href=&quot;#中医是不是科学&quot; class=&quot;headerlink&quot; title=&quot;中医是不是科学&quot;&gt;&lt;/a&gt;中医是不是科学&lt;/h3&gt;
&lt;p&gt;说实话，经过我的观察，我觉得这个问题其实大家彼此异议最小。别急，听我慢慢道来。
    &lt;br&gt;前两天看到了一篇文章，说到人们讨论的问题可以分为三类：一是事实性问题，就是讨论一见事情是否符合事实，多半这类问题可以转变成答案是“是”或者“否”的问题，比如今早吃没吃鸡蛋，这类问题有着唯一正确的结论，因为符合和没符合事实是互斥的；二是偏好性问题，就是你是否喜欢一个事物，比如红的好看还是绿的好看，这类问题没有错误的结论，因为不同人喜好不同；三是判断性问题，就是你对一个事物或现象的看法，这类问题的答案有多个，取决于你观察问题的角度。
    &lt;br&gt;然而在我看来，这个归类法存在一个陷阱，那就是一个问题如果要成为事实性问题，必须其表述上是没有歧义的，而且这个唯一的含义能够得到所有参与讨论问题的人的认同。
    &lt;br&gt;比如下面这个问题：太阳是否从东方升起？表面上看起来这是个事实性问题，答案只有“是”或者“否”，而且正确答案应该是“是”。但是你有没有想过，什么叫做“东方”，什么叫做“升起”呢？当你考虑过这些维度之后，你就会发现这个问题的答案不那么简单了：&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;太阳是不会自行升起的。我们只是在地球表面的一个观察点，基于地球自转的运动参照系观察到太阳在远离地心这个维度上有高度的上升变化。&lt;/li&gt;
    &lt;li&gt;这个观察点不包括南北极两个点，因为南极点只有北方而北极点只有南方。&lt;/li&gt;
    &lt;li&gt;东方表示的是以东方为中心，误差为23度26分21.448秒的一个方向的范围。否则，只有春分秋分那两天，太阳才是从非常接近东方的方向（还不能说是绝对的东方）升起的。有意思的是，对于我国绝大部分地区来说，冬至那天的太阳升起时的方向，距离正东北方反倒更接近些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么，回到“中医是不是科学”这个问题：表面看起来，它是一个答案是“是”或者“否”的事实性问题。但是，如果认为这个问题有着唯一正确的结论，需要大家认可一个唯一的对“中医”和“科学”这两个概念的解释。很可惜，这样的无二义性的解释并不存在。笔者试着用一些没有二义性的方式来表述一些本人的看法，大家可以对照一下，是不是同自己的理解是一样的：&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;以下表述中，中医的定义为：主流的研究并发展“中医”这一概念的学者所认同的基于中国传统的对于医疗方向知识所总结的一套学说体系。西医的定义为：基于解剖学、物理学、化学、生物学、分子生物学等其他学科，辅以实验以及数据分析的对于医疗方向知识所总结的一套学说体系。&lt;/li&gt;
    &lt;li&gt;中医学说体系与西医学说体系在问题定义以及验证方法尚存在分歧。换句话说，目前并不存在双方均认可的问题定义和验证方法。&lt;/li&gt;
    &lt;li&gt;按照中医所提出的问题定义和验证方法，中医学说体系是可以通过实验方法验证的。&lt;/li&gt;
    &lt;li&gt;目前尚无足够多的数据对中医学说体系的基础理论证实或者证伪。&lt;/li&gt;
    &lt;li&gt;西医中主流学者对于是否存在一种方式将中医与西医两种学说统一起来存在争议。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之所以列了这么多条，是因为“科学”这一概念的解释方式很多，这里只是采纳了主流的几种解释（可验证论、证伪论、科学共同体论）。如果您认同上面所说的所有条目，那么我们的观点是一致的。至于中医是不是科学，那取决于您如何定义“中医”与“科学”了。&lt;/p&gt;
&lt;h3 id=&quot;该如何对待中医&quot;&gt;
    &lt;a href=&quot;#该如何对待中医&quot; class=&quot;headerlink&quot; title=&quot;该如何对待中医&quot;&gt;&lt;/a&gt;该如何对待中医&lt;/h3&gt;
&lt;p&gt;医学与其他学科的不同在于，医学的学说建立存在着较大的滞后性。也就是说，无论是西医或者中医，都存在着大量无法解释的现象，也都存在很多不明机理但却有效的治疗方式。作为在一个存在大量未知现象的领域的一种学说体系，简单地说保留或者废除都是不合时宜的。其实完全可以按照市场化的方式，让其自己发展或者消亡。在某一领域，至少如果一种学说体系无法完全给出完整的解决方案之前，其他学说体系的存在都是有意义的。
    &lt;br&gt;作为每天需要使用医学结论的普通人，在面对治疗方案时，其实是一个对于投资回报的判断：如果我按照这个治疗方案进行投资，那么我有多大的可能会获得这个治疗方案所宣称的结果。这个时候，你要考虑的不是那个在诸多限制条件下的学术上的结论。治疗方案提出者是否了解学说本身，安慰剂等诸多浮动效应有多大可能发生都是考察的对象。比如说，假如有这样的一个理论，它虽然完全不能自洽，但是按照这个理论的手段能够保证百分之百出现安慰剂效应（当然很可能是由于某个尚未发现的原因）从而治好你的病，你愿不愿意采用呢？再比如，有一个医学理论，可以百分之百治好你的病，但是能够准确理解这个理论的医生万里也挑不出一个来，你愿不愿意采用眼前的医生基于这个理论提出来的解决方案呢？所以，是否采纳中/西医的解决方案，跟上面那个“中医是不是科学”问题完全是两个问题。这是一个个人做出的判断，风险自担，跟别人无关（只是不管是哪一种解决方案，准确地了解是否已研究过副作用或者是否有已知的副作用是基本的权利）。&lt;/p&gt;
&lt;h3 id=&quot;几个误区&quot;&gt;
    &lt;a href=&quot;#几个误区&quot; class=&quot;headerlink&quot; title=&quot;几个误区&quot;&gt;&lt;/a&gt;几个误区&lt;/h3&gt;
&lt;p&gt;我们在思考问题的时候，经常会走入一些误区。准确地识别出它们，是独立思考的一个必要的步骤。&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;在一个学说体系中，曾经提出的一个学说，如果没有被现在该学说体系的主流学者认同，则并不能视为是该学说体系的一部分。比如亚里士多德曾提出力是维持物体匀速运动的原因，我们不能认为这是物理学所秉持的观点。因此，如果你发现某古医书里写治疟疾要让大公鸡喊两声，也不能认为这是中医的观点。&lt;/li&gt;
    &lt;li&gt;不能将一个学说的概念套用在另一个学说上并作为反驳的基础，这是因为两者问题定义不同。比如我们不能因为球面几何中不存在欧式几何中平行线这个概念而认为球面几何是错误的。因此，利用中药如果不能提供维生素就无法治疗维生素引发的疾病反驳中医也是没有道理的。&lt;/li&gt;
    &lt;li&gt;观察不到的概念不等于不存在。你不能因为观察不到某些微观粒子而否定某些量子物理学说，不能因为看不到插件而否定这一编程概念，同样你也不能因为无法从解剖中看不到经脉而否定它（当然你可以用其他方式来否定）。&lt;/li&gt;
    &lt;li&gt;表述方式原始的概念不等于不正确。有些概念有可能沿用了几千年，表述起来自然听起来不那么现代。但是概念是否正确跟这关系不大。比如苗这个概念用了上千年，却并不妨碍我们使用它来解释疫苗。中医的五行也并不是说你发烧的时候身体里就真的有物质在剧烈燃烧。只是如果一个学说体系想要得到发展，准确的阐释每个概念是非常必要的。&lt;/li&gt;
&lt;/ol&gt;</content>
    
    <summary type="html">
    
      最近也许是因为屠呦呦的诺贝尔获奖，千年大坑“中医是不是科学”又烽烟再起，争论愈演愈烈。思考良久，颇有心得，于是诉诸笔端。笔者知识有限，有些观点可能有误，欢迎斧正。
    
    </summary>
    
      <category term="思考" scheme="http://sparkshining.com/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
      <category term="科学" scheme="http://sparkshining.com/tags/%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>通俗地解释第三方登录</title>
    <link href="http://sparkshining.com/2015/10/14/common-third-party-authentication/"/>
    <id>http://sparkshining.com/2015/10/14/common-third-party-authentication/</id>
    <published>2015-10-14T10:11:51.000Z</published>
    <updated>2015-10-14T10:14:47.000Z</updated>
    
    <content type="html">&lt;p&gt;最近正在做SAML相关的事情，苦于没有一个第三方登录流程的通俗解释。结合以前做过的OpenID，试着自己解释一下。以下故事中机构名与人名均属化名，如有雷同，纯属巧合。&lt;/p&gt;
&lt;p&gt;话说最近上海开了一家“人间天上”高级程序员休闲会所，供程序员在里面聊聊算法、思考人生。一天，有一个衣着入时的美女来找会所看门的王二狗，该美女自称是高级程序员，名叫郭小美，要求入会。王二狗又不是混程序圈的，咋知道这个人该不该放进去呢？于是王二狗请示安保主管雷老大。雷老大眼睛一瞪：老子又不是神仙，咋知道？
    &lt;br&gt;不过雷老大不愧是雷老大，经得多见得广，这点小事难不倒他。雷老大亲自接见郭小美，几个来回，事情就办成了：&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;雷老大拱了拱手：没听说过姑娘的名号，不知道是那路的？郭小美嫣然一笑：瞧您说的，没点背景还敢来？我是高级程序员协会的。&lt;/li&gt;
    &lt;li&gt;雷老大大腿一拍：这就好办了，认识高级程序员协会会长盖茨比么？郭小美一愣：当然认识了，我干爹呀。&lt;/li&gt;
    &lt;li&gt;雷老大嘿嘿一笑：这就更不是外人了。可惜这入会严格的规矩上面定的，我也没办法，要不你让盖茨比批个条子拿来，也让兄弟方便？郭小美皱了皱眉：真麻烦，好吧，就这么办！&lt;/li&gt;
    &lt;li&gt;郭小美去找盖茨比，凭借着两人深厚的革命友谊，很快条子拿来了。上面一行字：兹证明郭小美（女，身份证号XXX，三围XXX）是高级程序员协会会员——盖茨比。笔锋苍劲，一看就是练过的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看到条子，雷老大满脸堆笑：不好意思呀，还让郭小姐多跑了一趟。回头招呼王二狗：傻站着干啥，赶紧办理入会！&lt;/p&gt;</content>
    
    <summary type="html">
    
      最近正在做SAML相关的事情，苦于没有一个第三方登录流程的通俗解释。结合以前做过的OpenID，试着自己解释一下。以下故事中机构名与人名均属化名，如有雷同，纯属巧合。
    
    </summary>
    
      <category term="技术" scheme="http://sparkshining.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
      <category term="模型解释" scheme="http://sparkshining.com/tags/%E6%A8%A1%E5%9E%8B%E8%A7%A3%E9%87%8A/"/>
    
  </entry>
  
  <entry>
    <title>zone.js简介</title>
    <link href="http://sparkshining.com/2015/10/10/introduction-to-zone-js/"/>
    <id>http://sparkshining.com/2015/10/10/introduction-to-zone-js/</id>
    <published>2015-10-10T10:15:33.000Z</published>
    <updated>2015-10-12T12:06:07.000Z</updated>
    
    <content type="html">&lt;p&gt;当你使用Angular 2的时候，你会惊喜地发现你不再需要$rootScope.$apply了，即使你直接调用addEventListener挂载一个事件处理器偷偷修改了模型，也不需要通知Angular。Angular似乎能够“未卜先知”地知道你的所有小动作。这一切的功劳都归功于zone.js。&lt;/p&gt;
&lt;p&gt;zone.js的github地址见
    &lt;a href=&quot;https://github.com/angular/zone.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。原代码库提供了一个
    &lt;a href=&quot;https://www.youtube.com/watch?v=3IqtmUscE_U&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ng-conf上的video&lt;/a&gt;(需翻墙)来解释这个库的背景。注意
    &lt;strong&gt;zone.js是一个独立的库，并不依赖于Angular&lt;/strong&gt;，所以你无需担心被“某些别有用心的大户”挟持了。&lt;/p&gt;
&lt;p&gt;简单地说，zone.js允许你为一段代码及其衍生出的代码提供了一个统一的上下文（zone.js称之为zone）。这个概念类似Node中的domain或者Java中的thread locals。
    &lt;br&gt;能够在源于同一段代码的有着不同stack trace的程序间共享数据是一件很诱人的事情。比如说，你想统计程序的执行时间，然而你却有这样的一段奇葩程序：它自己要执行1秒，并且触发一个异步的操作；这个异步的操作又执行了3秒。如果你能够在这两段程序间共享数据，这个问题就简单多了。
    &lt;br&gt;当然，你完全可以自己通过给每个入口的地方都加入一段代码的方式来解决这个问题，但是你会更希望能够使用一种类似zone.js提供的这种“面向切面”的优雅解决方案。&lt;/p&gt;
&lt;p&gt;首先，如果用这样的方式来运行你的程序：
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zone.run(yourCode);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这样你的这段代码以及其衍生的代码，包括：&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;它注册的浏览器事件处理器&lt;/li&gt;
    &lt;li&gt;它通过setTimeout和setInterval在未来执行的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以及衍生代码所衍生的代码就共享一个zone了。&lt;/p&gt;
&lt;p&gt;那么，怎么使用这个zone呢？你可以通过类似下面这段代码这样通过zone.fork来插入一些监听器：
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zone.fork(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  beforeTask: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在每段代码执行前都会执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  afterTask: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在每段代码执行后都会执行的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).run(youCode);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;比如，在beforeTask记录下开始时间，afterTask时记录下结束时间、与开始时间比较算出执行时间并且累加，你就可以解决前文说过的那个问题了。本文开头的Angular 2的$rootScope.$apply的迷雾也就解开了，因为Angular 2使用了zone并且在afterTask时帮你执行这个了。&lt;/p&gt;
&lt;p&gt;zone.js的实现原理很简单，就是mock掉你的每个入口位置。多么地简单粗暴啊！但是非常有效。&lt;/p&gt;
&lt;p&gt;说了这么多，来看一个最最简单地例子吧：我们想在每次执行代码(主函数、事件监听函数和setTimeout加入的macrotask)的前后各打印一行log。&lt;/p&gt;
&lt;p&gt;首先，我们新创建一个空文件夹来装例子所需的文件。
    &lt;br&gt;然后，因为zone支持bower，我们通过在该文件夹中运行下面的命令(有关bower使用，请见
    &lt;a href=&quot;http://bower.io/#getting-started&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;)下载zone：
    &lt;br&gt;
    &lt;figure class=&quot;highlight bash&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bower install zone&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然后，在目录下创建index.html文件。那么默认情况下，相对于html文件，zone.js文件的位置应该是”bower_components/zone/dist/zone.js”。html文件内容如下
    &lt;br&gt;
    &lt;figure class=&quot;highlight html&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Zone.js Basic Demo&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;./bower_components/zone/dist/zone.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Basic Example&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;trigger&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Run async code&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * This is a simple example of async stack traces with zones&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Run main&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        trigger.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, clickHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clickHandler&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Run click handler&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Run macro task&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Bootstrap the app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    zone.fork(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        beforeTask: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Enter zone&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        afterTask: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Leave zone&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).run(main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然后你可以用类似
    &lt;a href=&quot;https://github.com/indexzero/http-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http-server&lt;/a&gt;的方法来部署这个文件并用浏览器访问。
    &lt;br&gt;在页面加载后，你会在控制台看到如下信息
    &lt;br&gt;
    &lt;figure class=&quot;highlight python&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Enter zone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Leave zone&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当点击页面中的按钮时，控制台会打印如下信息
    &lt;br&gt;
    &lt;figure class=&quot;highlight python&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Enter zone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run click handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Leave zone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter zone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run macro task&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Leave zone&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;值得指出的是，zone.js那个文件本身并不支持microtask（有关macrotask和microtask，日后我会专门写一篇文章来解释）。如果想支持microtask，你需要使用库里面的zone-microtask.js。这个文件比zone.js大很多，主要的原因是它用es6-promise完全替换掉了浏览器内置的Promise。&lt;/p&gt;</content>
    
    <summary type="html">
    
      当你使用Angular 2的时候，你会惊喜地发现你不再需要$rootScope.$apply了，即使你直接调用addEventListener挂载一个事件处理器偷偷修改了模型，也不需要通知Angular。Angular似乎能够“未卜先知”地知道你的所有小动作。这一切的功劳都归功于zone.js。
    
    </summary>
    
      <category term="技术" scheme="http://sparkshining.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
      <category term="JS" scheme="http://sparkshining.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>如何生成一个安全的随机数</title>
    <link href="http://sparkshining.com/2015/10/09/js-safe-get-random/"/>
    <id>http://sparkshining.com/2015/10/09/js-safe-get-random/</id>
    <published>2015-10-09T09:54:03.000Z</published>
    <updated>2015-10-12T08:51:17.000Z</updated>
    
    <content type="html">&lt;p&gt;提起随机数，大家的第一反应一般是Math.random。然而，
    &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.14&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript里面&lt;/a&gt;(中文版见
    &lt;a href=&quot;http://lzw.me/pages/ecmascript/#457&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;)并没有规定用什么算法来实现这个API，只是规定了生成的数字应该在[0, 1)内近似均匀分布。这就使得很多引擎实现在实现时采用了比较简单地算法，并不保证随机数的不可预测。
    &lt;br&gt;这样的随机数显然不能用于数据加密。那么，有什么API可以获得一个安全的随机数呢？&lt;/p&gt;
&lt;p&gt;如果是Node.js，你可以使用
    &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;crypto.randomBytes(size[, callback])&lt;/a&gt;这个API，比如下面的code获得了一个包含4个byte的随机数：
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;crypto.randomBytes(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, buf&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(buf.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(buf[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], buf[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], buf[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], buf[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;那浏览器端怎么办呢，你可以使用
    &lt;a href=&quot;http://www.w3.org/TR/WebCryptoAPI/#Crypto-method-getRandomValues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;crypto.getRandomValues(array)&lt;/a&gt;这个API，现在很多浏览器都支持这个API了（具体浏览器支持情况请见
    &lt;a href=&quot;http://caniuse.com/#feat=getrandomvalues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;），比如下面的code获得了一个Uint32（4个byte）的随机数：
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buffer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Uint32Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;crypto.getRandomValues(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(buffer[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;搞定，收工！&lt;/p&gt;</content>
    
    <summary type="html">
    
      提起随机数，大家的第一反应一般是Math.random。然而，ECMAScript里面并没有规定用什么算法来实现这个API，只是规定了生成的数字应该在[0, 1)内近似均匀分布。这就使得很多引擎实现在实现时采用了比较简单地算法，并不保证随机数的不可预测。这样的随机数显然不能用于数据加密。那么，有什么API可以获得一个安全的随机数呢？
    
    </summary>
    
      <category term="技术" scheme="http://sparkshining.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
      <category term="JS" scheme="http://sparkshining.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>自定义JS对象的序列化与反序列化过程</title>
    <link href="http://sparkshining.com/2015/10/08/jsobject-serialization-deserialization/"/>
    <id>http://sparkshining.com/2015/10/08/jsobject-serialization-deserialization/</id>
    <published>2015-10-08T08:32:08.000Z</published>
    <updated>2015-11-02T06:07:42.000Z</updated>
    
    <content type="html">&lt;p&gt;先更正一个概念，JSON是一种数据表达的格式（见
    &lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC-4627&lt;/a&gt;），就像我们平常说的xml、csv一样。它本身不是数据，也不依赖于具体编程语言。用.net、Java或者Python都能生成JSON格式的数据。
    &lt;br&gt;
    &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSON对象(JSON Object)&lt;/a&gt;(中文文档见
    &lt;a href=&quot;http://lzw.me/pages/ecmascript/#609&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;)这个术语是有的，它是全局对象众多属性中的一个。它包含两个函数：parse和stringify，用于解析和构造JSON文本。但是JSON对象跟
    &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对象初始化(Object Initialiser)&lt;/a&gt;(中文文档见
    &lt;a href=&quot;http://lzw.me/pages/ecmascript/#159&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;)是两码事，后者用于以直接量的方式初始化一个对象，比如
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123; myField: &lt;span class=&quot;string&quot;&gt;&#39;myValue&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注意不要弄混了。&lt;/p&gt;
&lt;p&gt;其实JSON.stringify和JSON.parse的参数都不止一个，根据ECMAScript 5.1规范，两者的声明分别是：
    &lt;br&gt;
    &lt;figure class=&quot;highlight css&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.stringify&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[ , replacer [ , space ]&lt;/span&gt; ] )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.parse&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;selector-attr&quot;&gt;[ , reviver ]&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这就使得我们可以控制序列化和反序列化的过程。比如下面的代码模拟了一个让函数在序列化并反序列化后仍旧保持不丢失的情况。
    &lt;br&gt;
    &lt;figure class=&quot;highlight javascript&quot;&gt;
        &lt;table&gt;
            &lt;tr&gt;
                &lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
                &lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  myField: &lt;span class=&quot;string&quot;&gt;&#39;myValue&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  myFunction: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;function is not able to be serialized&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;replacer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; value === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;__function&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; JSONString = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(obj, replacer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reviver&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (value === &lt;span class=&quot;string&quot;&gt;&#39;__function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;function restored by reviver&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; restoredObj = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.parse(JSONString, reviver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;restoredObj.myFunction();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;值得注意的是，除了函数外，replacer还支持其他几种类型。有兴趣的请翻阅
    &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript规范相关部分&lt;/a&gt;(中文版见
    &lt;a href=&quot;http://lzw.me/pages/ecmascript/#614&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;)。最有意思的是，你还可以通过定义toJSON函数来自定义序列化的过程。&lt;/p&gt;</content>
    
    <summary type="html">
    
      JSON.stringify和JSON.parse的第二个参数使得我们可以控制序列化和反序列化的过程。
    
    </summary>
    
      <category term="技术" scheme="http://sparkshining.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="天天向上" scheme="http://sparkshining.com/tags/%E5%A4%A9%E5%A4%A9%E5%90%91%E4%B8%8A/"/>
    
      <category term="JS" scheme="http://sparkshining.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>开篇志</title>
    <link href="http://sparkshining.com/2015/08/27/hello-world/"/>
    <id>http://sparkshining.com/2015/08/27/hello-world/</id>
    <published>2015-08-27T11:23:29.000Z</published>
    <updated>2015-10-12T11:51:47.000Z</updated>
    
    <content type="html">&lt;p&gt;一个雨后的黄昏，一杯清茶，一支笔，一张纸。就此开始。&lt;/p&gt;
&lt;p&gt;其实上大学那会儿，还是个挺矫情的人，没事就写点东西。等工了作，成了家，有了孩子，事情一多，也就慢慢变得大条了。
    &lt;br&gt;当然，也是生活舒适了，没那么多伤春悲秋的事。
    &lt;br&gt;一晃七八年，猛然发现竟然没留下什么印象。偶尔翻翻照片，一片陌生。
    &lt;br&gt;觉得有点对不起自己，也对不起那些重要的人。本是萍水相逢，却逐渐印入对方的生活。其间曲曲折折，竟这样逐渐淡了。
    &lt;br&gt;未来之路还很长，不求别的，只求能留下些印记，为自己，也为重要的人。&lt;/p&gt;
&lt;p&gt;工作亦是如此，几年下来，颇有些心得。本是好为人师的，只因太懒，几次冲动最后都只是动了动嘴皮子。
    &lt;br&gt;其间，跟着公司一位前辈一起出了一本书，写的是一个小众的框架，出版后据说风评还不错。
    &lt;br&gt;那段时间废寝忘食，写的很是酣畅淋漓。等书出版以后，懒心又起，原来CSDN的博客就这样彻底荒掉了。&lt;/p&gt;
&lt;p&gt;我虽然喜欢技术，却只限于工作或是猎奇。生活中却是保守得很。
    &lt;br&gt;在移动上网3G、4G如火如荼的时候，我还揣着一台老旧的Nokia，除了打电话发短信，跟网络没有半毛钱关系。
    &lt;br&gt;支付宝是去年才开始用的，滴滴打车是上个月才开始用的。人家咣咣往里砸钱，补贴满天飞的时候，我依旧去超市买东西，坐地铁上下班。
    &lt;br&gt;个人网站也是这样，虽然我的工作一直跟网页相关，却从来没有一个自己的网站。
    &lt;br&gt;没什么，不感冒而已。&lt;/p&gt;
&lt;p&gt;偶然一个机会，一时冲动，买了个域名。买完之后，花了几分钟做了个巨丑陋的“网站正在建设中”的页面，而后就放在那儿。
    &lt;br&gt;结果没出两个月，接了无数来自百度推广市场部的电话，后来连自己都烦了。既然已经被骚扰了，不妨就写点什么吧。&lt;/p&gt;
&lt;p&gt;花了些时间，搞了个自己看着还算凑合的模板，用hexo搭了个台子。就这样，今天算是开张了。
    &lt;br&gt;其实这里充其量只能算是个自留地，能记录下生活技术上的点点滴滴，也就知足了。&lt;/p&gt;</content>
    
    <summary type="html">
    
      一个雨后的黄昏，一杯清茶，一支笔，一张纸。就此开始。
    
    </summary>
    
      <category term="生活" scheme="http://sparkshining.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="瞎扯" scheme="http://sparkshining.com/tags/%E7%9E%8E%E6%89%AF/"/>
    
  </entry>
  
</feed>
